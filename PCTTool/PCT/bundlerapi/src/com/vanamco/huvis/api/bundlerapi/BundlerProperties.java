/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vanamco.huvis.api.bundlerapi;

import com.vanamco.huvis.modules.toolbox.povRelated.PovrayParser;
import com.vanamco.huvis.modules.toolbox.projectRelated.NotifyProperties;
import com.vanamco.huvis.modules.toolbox.projectRelated.PCTSettings;
import java.awt.Color;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import org.netbeans.spi.project.ProjectState;

/**
 * This class is used to store and process properties of the Bundler process.
 * It contains important naming conventions for files and folders, as well
 * as a reference to the PCT project state.
 * @author ybrise
 */
public final class BundlerProperties extends NotifyProperties {

    PropertyChangeSupport pcs = new PropertyChangeSupport(this);
    
    /**
     * Indicates the name of the output file generated by the Bundler process.
     */
    public static final String BUNDLE_FILE_NAME = "bundle.out";
    /**
     * Indicates the name of the directory used for Povray.
     */
    public static final String POVRAY_DIRECTORY_NAME = ".." + PCTSettings.FILESEPARATOR + "povray";
    /**
     * Indicates the name of the directory for the final output.
     */
    public static final String OUTPUT_DIRECTORY_NAME = "output";
    /**
     * Indicates the name of the file produced by the Bundler process that
     * contains the filenames of the input pictures.
     */
    public static final String OUTPUT_LIST_JPGS = "list_jpgs.txt";
    /**
     * Indicates the name of the file produced by the Bundler process that
     * contains the (estimated) focal lengths of the input pictures.
     */
    public static final String OUTPUT_LIST_FOCAL = "list_focal.txt";
    
    private Color camColor;
    private float imageProportion;
    float openingAngle;
    // dimenstion of the files bundled (should all have the same!)
    private int my_width;
    private int my_height;
    private float featureSize;

    /**
     * Constructor
     * @param state The project state.
     * @param listener A listener that is alerted when the internal state of
     *                 this object changes.
     */
    public BundlerProperties(ProjectState state, PropertyChangeListener listener) {
        super(state);
        pcs.addPropertyChangeListener(listener);
        setWidth(80);
        setHeight(60);
        setCamColor(Color.CYAN);
        setImageProportion(4/3.0f);
        setOpeningAngle(60.0f);
        setFeatureSize(0.1f);
    }

    /**
     * This method is used to transcribe the (String, String) pairs from the
     * underlying Properties hashmap to the private variables.
     */
    public void consolidate() {
        setWidth(Integer.parseInt(getProperty("width")));
        setHeight(Integer.parseInt(getProperty("height")));
        setCamColor(PovrayParser.parseColorString(getProperty("camColor")));
        setImageProportion(Float.parseFloat(getProperty("imageProportion")));
        setOpeningAngle(Float.parseFloat(getProperty("openingAngle")));
        setFeatureSize(Float.parseFloat(getProperty("featureSize")));
    }
    
    
    /**
     *  Get camera color.
     * @return Camera color.
     */
    public Color getCamColor() {
        return camColor;
    }

    /**
     * Get the proportion of the images in the scene.
     * @return Image proportion.
     */
    public float getImageProportion() {
        return imageProportion;
    }

    /**
     * Get the width of the images in the scene.
     * @return Image width.
     */
    public int getWidth() {
        return my_width;
    }

    /**
     * Get the height of the images in the scene.
     * @return Image height.
     */
    public int getHeight() {
        return my_height;
    }

    /**
     * Get the opening angle of the images in the scene.
     * @return Image opening angle.
     */
    public float getOpeningAngle() {
        return openingAngle;
    }
    
    /**
     * Get the size of the features in the scene.
     * @return Feature scene.
     */
    public float getFeatureSize() {
        return featureSize;
    }

    /**
     * Set the color of the camera in the scene, WITHOUT making this known
     * to the observers of this instance of Properties.
     * @param camColor The camera color to be used in the scene.
     */
    public void setCamColor(Color camColor) {
        setProperty("camColor", PovrayParser.toPov(camColor));
        this.camColor = camColor;
    }
    
    /**
     * Set the color of the camera in the scene, making it known to the observers
     * of this instance of Properties.
     * @param camColor The camera color to be used in the scene.
     */
    public final void pushCamColor(Color camColor) {
        pushProperty("camColor", PovrayParser.toPov(camColor));
        pcs.firePropertyChange("bundler-camcolor", PovrayParser.toPov(this.camColor), PovrayParser.toPov(camColor));
        this.camColor = camColor;
    }

    /**
     * Set the proportion of the images in the scene, WITHOUT making this known
     * to the observers of this instance of Properties.
     * @param imageProportion Image proportion.
     */
    public void setImageProportion(float imageProportion) {
        setProperty("imageProportion", Float.toString(imageProportion));
        this.imageProportion = imageProportion;
    }
    
    /**
     * Set the proportion of the images in the scene, making it known to the observers
     * of this instance of Properties.
     * @param imageProportion Image proportion.
     */
    public final void pushImageProportion(float imageProportion) {
        pushProperty("imageProportion", Float.toString(imageProportion));
        pcs.firePropertyChange("bundler-imageproportion", Float.toString(this.imageProportion), Float.toString(imageProportion));
        this.imageProportion = imageProportion;
    }

    /**
     * Set the width of the images in the scene, WITHOUT making this known
     * to the observers of this instance of Properties.
     * @param width Image width.
     */
    public void setWidth(int width) {
        setProperty("width", Integer.toString(width));
        this.my_width = width;
    }
    
    /**
     * Set the width of the images in the scene, making it known to the observers
     * of this instance of Properties.
     * @param width Image width.
     */
    public final void pushWidth(int width) {
        pushProperty("width", Integer.toString(width));
        pcs.firePropertyChange("bundler-width", Integer.toString(this.my_width), Integer.toString(width));
        this.my_width = width;
    }

    /**
     * Set the height of the images in the scene, WITHOUT making this known
     * to the observers of this instance of Properties.
     * @param height Image height.
     */
    public void setHeight(int height) {
        setProperty("height", Integer.toString(height));
        this.my_height = height;
    }
    
    /**
     * Set the height of the images in the scene, making it known to the observers
     * of this instance of Properties.
     * @param height Image height.
     */
    public final void pushHeight(int height) {
        pushProperty("height", Integer.toString(height));
        pcs.firePropertyChange("bundler-height", Integer.toString(this.my_height), Integer.toString(height));
        this.my_height = height;
    }

    /**
     * Set the opening angle of the images in the scene, WITHOUT making this known
     * to the observers of this instance of Properties.
     * @param openingAngle Opening angle.
     */
    public void setOpeningAngle(float openingAngle) {
        setProperty("openingAngle", Float.toString(openingAngle));
        this.openingAngle = openingAngle;
    }
    
    /**
     * Set the opening angle of the images in the scene, making it known to the observers
     * of this instance of Properties.
     * @param openingAngle Opening angle.
     */
    public final void pushOpeningAngle(float openingAngle) {
        pushProperty("openingAngle", Float.toString(openingAngle));
        pcs.firePropertyChange("bundler-openingangle", Float.toString(this.openingAngle), Float.toString(openingAngle));
        this.openingAngle = openingAngle;
    }
    
    /**
     * Set the size of the features in the scene, WITHOUT making this known
     * to the observers of this instance of Properties.
     * @param featureSize Feature size.
     */
    public void setFeatureSize(float featureSize) {
        setProperty("featureSize", Float.toString(featureSize));
        this.featureSize = featureSize;
    }
    
    /**
     * Set the size of the features in the scene, making it known to the observers
     * of this instance of Properties.
     * @param featureSize Feature size.
     */
    public final void pushFeatureSize(float featureSize) {
        pushProperty("featureSize", Float.toString(featureSize));
        pcs.firePropertyChange("bundler-featuresize", Float.toString(this.featureSize), Float.toString(featureSize));
        this.featureSize = featureSize;
    }
}
